using System;

namespace Base128SMPDecoder
{
    public static class Base128Decode
    {
        /*
         * 
         * Making inverted vocabulary for decoding in PowerShell:
         * 
         * # This is original encoding vocabulary
         * $abc_str = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ЁАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя';
         * # Here we set vocabulary codepage number
         * $enc = [System.Text.Encoding]::GetEncoding(1251);$abc = $enc.GetBytes($abc_str);$abcInv = @(0..255);foreach ($i in (0..255)) {$abcInv[$i] = 255;} 
         * $j = 0;foreach($i in $abc) { $abcInv[$i] = $j; $j++; } 
         * $line = '';$j = 0;
         * Write-Host  "byte[] revAbc = { "
         * foreach ($i in (0..255)) {
         *     if($j -eq 0){Write-Host $(' '*24) -NoNewline};
         *     Write-Host "0x$([System.Convert]::ToString($abcInv[$i],16).padLeft(2,'0')), " -NoNewline;$j++;
         *     if($j -eq 8){$j = 0;Write-Host '';}}
         * Write-Host  "$(' '*24)};"
         * 
         *  
        */
        static byte[] revAbc = {
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
                        0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
                        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
                        0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
                        0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
                        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
                        0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
                        0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
                        0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
                        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
                        0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
                        };

        public static byte[] Decode(byte[] input)
        {
            Int32 inputSize = input.Length;
            Int32 outputSize = (Int32)Math.Floor((double)(inputSize * 7 / 8))+1;
            byte[] output = new byte[outputSize];
            Int32 posOutput = 0;
            Int32 pos8 = 0;
            for (Int32 posInput = 0; posInput < inputSize; posInput++)
            {
                byte n = revAbc[input[posInput]];
                if (n == 255) { throw new Exception("Illegal character in input"); }
                switch (pos8)
                {
                    case 0:
                        {
                            output[posOutput] = n;
                            pos8++;
                            break;
                        }
                    case 7:
                        {
                            output[posOutput + 6] = (byte)(output[posOutput + 6] + (n << 1));
                            pos8 = 0;
                            posOutput += 7;
                            break;
                        }
                    default:
                        {
                            output[posOutput + pos8 - 1] = (byte)(output[posOutput + pos8 - 1] + (n << (8 - pos8))); 
                            output[posOutput + pos8] = (byte)(n >> pos8);
                            pos8++;
                            break;
                        }
                }
            }
            return output;

        }

    }
}
